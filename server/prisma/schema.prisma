// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        Int             @id @default(autoincrement())
  email         String          @unique
  name          String?
  createdAt     DateTime        @default(now()) @updatedAt
  DetectedShock DetectedShock[]
  File          File[]
  Route         Route[]
}

model Coordinate {
  id        Int     @id @default(autoincrement())
  latitude  Float
  longitude Float
  altitude  Float
  Location  Location?
  DetectedShock DetectedShock?
}

model Location {
  id        Int        @id @default(autoincrement())
  routeId   Int        @unique
  coordinateId Int     @unique
  Route     Route      @relation(fields: [routeId], references: [id])
  coordinate Coordinate @relation(fields: [coordinateId], references: [id])
}

model DetectedShock {
  id           Int        @id @default(autoincrement())
  timestamp    DateTime
  zAccel       Float
  userId       Int
  coordinateId Int @unique
  user         User       @relation(fields: [userId], references: [userId])
  coordinate   Coordinate @relation(fields: [coordinateId], references: [id])
}

model Route {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @updatedAt
  bounds    Location[]
  userId    Int
  user      User       @relation(fields: [userId], references: [userId])
}

model File {
  id       Int      @id @default(autoincrement())
  name     String
  uploadAt DateTime @default(now()) @updatedAt
  userId   Int
  user     User     @relation(fields: [userId], references: [userId])
  content  String
}
